name: Building and Pushing to MCR
on: [workflow_dispatch]

permissions:
      id-token: write
      contents: read

jobs:
  common:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
    - uses: actions/checkout@v3
    - name: Get Changelog Entry
      id: changelog_reader
      uses: mindsers/changelog-reader-action@v2
      with:
        validation_depth: 10
        path: ./CHANGELOG.md
    - name: Get Version Info
      id: read_metadata
      run: |
        echo "Version: ${{ steps.changelog_reader.outputs.version }}"
        echo "Changes: ${{ steps.changelog_reader.outputs.changes }}"
        $tagbase = "${{ vars.AZURE_REGISTRY_SERVER }}/public/aks/periscope:${{ steps.changelog_reader.outputs.version }}"
        echo "tagbase=$tagbase" >> $env:GITHUB_OUTPUT
    outputs:
      tagbase: ${{ steps.read_metadata.outputs.tagbase }}
      version: ${{ steps.changelog_reader.outputs.version }}
      changes: ${{ steps.changelog_reader.outputs.changes }}
  release:
    runs-on: ubuntu-latest
    needs: common
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: ${{ needs.common.outputs.version }}
        release_name: ${{ needs.common.outputs.version }}
        body: Publish ${{ needs.common.outputs.changes }}
    - uses: azure/setup-kubectl@v3
    - name: Build Deployment YAML
      run: |
        ./deployment/overlays/external/build-yaml.sh ${{ needs.common.outputs.version }} base
        ./deployment/overlays/external/build-yaml.sh ${{ needs.common.outputs.version }} win-hpc
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.common.outputs.version }}
        files: |
          publish/base.yaml
          publish/win-hpc.yaml
  publish:
    runs-on: ${{ matrix.os }}
    needs: common
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, windows-2019, windows-2022]
        include:
        - os: ubuntu-latest
          file: ./builder/Dockerfile.linux
          baseimage: 'mcr.microsoft.com/cbl-mariner/distroless/base:2.0'
          tagext: 'mariner2.0'
        - os: windows-2019
          file: ./builder/Dockerfile.windows
          baseimage: 'mcr.microsoft.com/windows/nanoserver:ltsc2019'
          tagext: 'nanoserver2019'
        - os: windows-2022
          file: ./builder/Dockerfile.windows
          baseimage: 'mcr.microsoft.com/windows/nanoserver:ltsc2022'
          tagext: 'nanoserver2022'
    defaults:
      run:
        shell: pwsh
    steps:
    - uses: actions/checkout@v3
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    - name: 'Publish to ACR'
      id: publish
      run: |
        $tag = "${{ needs.common.outputs.tagbase }}-${{ matrix.tagext }}"
        echo "tag-${{ matrix.os }}=$tag" >> $env:GITHUB_OUTPUT
        docker build -f ${{ matrix.file }} --build-arg BASE_IMAGE=${{ matrix.baseimage }} -t $tag .
        az acr login -n ${{ vars.AZURE_REGISTRY_SERVER }}
        docker push $tag
    outputs:
      linux: ${{ steps.publish.outputs.tag-ubuntu-latest }}
      win2019: ${{ steps.publish.outputs.tag-windows-2019 }}
      win2022: ${{ steps.publish.outputs.tag-windows-2022 }}
  update-manifest:
    runs-on: ubuntu-latest
    needs: [common, publish]
    defaults:
      run:
        shell: pwsh
    steps:
    - uses: actions/checkout@v3
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    - name: Publish cross-platform manifest
      id: publish
      run: |
        $tagbase = "${{ needs.common.outputs.tagbase }}"
        az acr login -n ${{ vars.AZURE_REGISTRY_SERVER }}
        docker manifest create $tagbase ${{ needs.publish.outputs.linux }} ${{ needs.publish.outputs.win2019 }} ${{ needs.publish.outputs.win2022 }}
        docker manifest push $tagbase
