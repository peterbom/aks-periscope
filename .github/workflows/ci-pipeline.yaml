name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: '1.16.1'
  KIND_VERSION: v0.11.1
  HELM_VERSION: v3.4.0

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Linter
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download modules
        run: go mod download
      - name: Build project
        run: go build ./cmd/aks-periscope
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
            fetch-depth: 2
      - uses: azure/setup-kubectl@v1
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_VERSION }}
      - name: Install Packages
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/${{ env.KIND_VERSION }}/kind-linux-amd64
          chmod +x ./kind
      - name: Start kind
        run: |
          docker run -d --restart=always -p "127.0.0.1:5000:5000" --name "registry" registry:2

          # 3 nodes (two workers) cluster with the local registry enabled in containerd (https://kind.sigs.k8s.io/docs/user/local-registry/)
          cat <<EOF | ./kind create cluster --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
          - role: worker
          - role: worker
          containerdConfigPatches:
          - |-
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5000"]
              endpoint = ["http://registry:5000"]
          EOF

          docker network connect "kind" "registry" || true

          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: local-registry-hosting
            namespace: kube-public
          data:
            localRegistryHosting.v1: |
              host: "localhost:5000"
              help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
          EOF
        continue-on-error: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Build and push to local registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: localhost:5000/periscope:${{ github.run_id }}
          file: ./builder/Dockerfile.linux
      - name: Deploy dummy helm chart for tests
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm install happy-panda bitnami/wordpress --namespace default
      - name: Deploy AKS Periscope
        # Deploy using the Kustomize functionality built in to kubectl
        # (placing the overlay in a gitignore'd location so this can be run locally
        # without editing source-controlled files).
        run: |
          # Create Kustomize overlay folder
          mkdir -p ./deployment/overlays/temp
          touch ./deployment/overlays/temp/.env.config
          touch ./deployment/overlays/temp/.env.secret

          # Build kustomization yaml
          export IMAGE_NAME_LINUX=localhost:5000/periscope
          export IMAGE_NAME_WINDOWS=unused
          export IMAGE_TAG=${{ github.run_id }}
          cat ./deployment/overlays/dynamic-image/kustomization.template.yaml | envsubst > ./deployment/overlays/temp/kustomization.yaml

          # Deploy and wait for readiness
          kubectl apply -k ./deployment/overlays/temp
          kubectl -n aks-periscope describe ds aks-periscope
          kubectl -n aks-periscope wait po --all --for condition=ready --timeout=240s
      - name: Go tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash) -C $(Build.SourceVersion)
      - name: Stop kind
        run: kind delete cluster
        continue-on-error: false
